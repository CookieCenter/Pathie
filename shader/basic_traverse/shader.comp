#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_scalar_block_layout : enable

#define maxDepth 17
#define maxDistance 4096.0
#define maxSearchDepth 300

#define sqr(number) (number * number)
#define rot(spin) mat2(cos(spin), sin(spin), - sin(spin), cos(spin))
#define dir(rot) vec3(cos(rot.x) * cos(rot.y), sin(rot.y), sin(rot.x) * cos(rot.y))
#define rad(degree) vec2(3.14 * degree / 180.0)

layout (local_size_x = 16, local_size_y = 16) in;
layout (set = 0, binding = 0, rgba8) uniform image2D computeImage;

layout (std430, set = 1, binding = 0) uniform Uniform {
    vec4 pos;

    vec2 res;
    vec2 mouse;

    float rootSpan;

    uint time;
} uniformBuffer;

struct TreeNode {
    uint children[8];

    // 0 = empty | 1 = subdivide | 2 = full
    uint nodeType;
    uint parent;
    vec4 baseColor; // ToDo -> Add transparency
};

layout (std430, set = 2, binding = 0) buffer OctreeData { TreeNode octreeData[40000]; };

struct Light {
    vec4 pos;
    uint index;
};

layout (set = 3, binding = 0) readonly buffer LightData { Light lightData[2000]; };


struct Ray {
    vec3 origin;
    vec3 dir;

    vec3 invRayDir; // Used for RayCube Intersection
};

// Position in Octree
struct PosInfo {
    vec3 maskInParent[maxDepth]; // Offset of array wrong

    vec3 localPos; // Position within current Cell / Node
    vec3 posOnEdge; // RayOrigin on the Edge of the Node

    uint index;
    float span;
    int depth;

    bool parentEdge; // Should move upward
};

struct Intersection {
    bool intersect;
    float dist;
    PosInfo info;
};

struct TraverseProp {
    // Max
    uint depth;
    float dist;
    uint searchDepth;
};

// RayCube Intersection on inside of Cube
vec3 rayCubeIntersect(vec3 origin, vec3 dir, vec3 invDir, float span) {
    return - (sign(dir) * (origin - span * 0.5) - span * 0.5) * invDir;
}

// Simple Hashing Scheme
uint maskToIndex(vec3 mask) {
    return uint(mask.x + mask.y * 4.0 + mask.z * 2.0);
}

void moveUp(in Ray ray, inout PosInfo info, inout vec3 dirMask, inout vec3 posMask, inout TreeNode node) {
    vec3 newPosOnEdge = floor(info.posOnEdge / (info.span * 2.0)) * (info.span * 2.0);

    info.localPos += info.posOnEdge - newPosOnEdge;
    info.posOnEdge = newPosOnEdge;

    // Moving one Layer upward -> Decrease RecursionAmount & Double info.span
    info.depth -= 1;
    info.span *= 2.0;

    TreeNode grandParent = octreeData[octreeData[node.parent].parent];
    posMask = abs(info.maskInParent[info.depth] - dirMask);
    info.maskInParent[info.depth] = posMask;

    info.index = grandParent.children[maskToIndex(posMask)];
    node = octreeData[info.index];

    info.parentEdge = (abs(dot(mod((info.posOnEdge + 0.25) / info.span + 0.5, 2.0) - 1.0 + dirMask * sign(ray.dir) * 0.5, dirMask)) < 0.1);
}

void moveDown(inout PosInfo info, inout TreeNode node, inout vec3 posMask) {
    // Moving one Layer down -> Increase RecursionAmount & Half info.span
    info.depth += 1;
    info.span *= 0.5;

    // Select specific Child
    posMask = step(vec3(info.span), info.localPos);

    info.posOnEdge += posMask * info.span;
    info.localPos -= posMask * info.span;

    info.index = node.children[maskToIndex(posMask)];
    node = octreeData[info.index];

    info.maskInParent[info.depth] = posMask;
}

void moveForward(in Ray ray, inout PosInfo info, inout Intersection intSec, inout vec3 dirMask, inout vec3 posMask, inout TreeNode node) {
    // Raycast and find info.distance to NearestNodeSurface in direction of Ray
    // No need to call everytime
    vec3 hit = rayCubeIntersect(info.localPos, ray.dir, ray.invRayDir, info.span);

    dirMask = vec3(lessThan(hit, min(hit.yzx, hit.zxy)));

    float len = dot(hit, dirMask);

    // Moving forward in direciton of Ray
    intSec.dist += len;

    info.localPos += ray.dir * len - dirMask * sign(ray.dir) * info.span;
    vec3 newPosOnEdge = info.posOnEdge + dirMask * sign(ray.dir) * info.span;

    posMask = abs(info.maskInParent[info.depth] - dirMask);
    info.maskInParent[info.depth] = posMask;

    info.index = octreeData[node.parent].children[maskToIndex(posMask)];
    node = octreeData[info.index];

    info.parentEdge = (floor(newPosOnEdge / info.span * 0.5 + 0.25) != floor(info.posOnEdge / info.span * 0.5 + 0.25));

    info.posOnEdge = newPosOnEdge;
}

Intersection traverseRay(Ray ray, PosInfo info, TraverseProp prop, int skip) {
    vec3 dirMask;
    vec3 posMask;

    TreeNode node = octreeData[info.index];

    Intersection intSec = Intersection(false, 0.0, info);

    // The Octree TraverseLoop
    // Each Iteration either check ...
    // ... If need to go up
    // ... If need to go down
    // ... If hit -> Break
    // ... If Node / Cell is empty -> Go one step forward

    int curStep;
    for (curStep = 0; curStep < prop.searchDepth; curStep += 1) {
        if (intSec.dist > prop.dist) break;

        // Should go up
        if (info.parentEdge) {
            if (gl_GlobalInvocationID.xy.x < 1 && gl_GlobalInvocationID.xy.y < 1) {
                // debugPrintfEXT("\nUp %d", info.index);
            }

            if (node.parent == 0) break;

            moveUp(ray, info, dirMask, posMask, node);
        } else {
            // Getting Node Type
            uint state = node.nodeType;

            // If State == Subdivide && too much Detail -> State = Empty
            if (state == 1 && info.depth + 1 > prop.depth - 1) state = 2;
            if (state > 1 && curStep < skip) state = 0;

            // If State = Subdivide && no Limit of Detail reached -> Select Child
            if (state == 1) {
                if (gl_GlobalInvocationID.xy.x < 1 && gl_GlobalInvocationID.xy.y < 1) {
                    // debugPrintfEXT("\nDown %d", info.index);
                }

                moveDown(info, node, posMask);

                // Move forward
            } else if (state == 0) {
                if (gl_GlobalInvocationID.xy.x < 1 && gl_GlobalInvocationID.xy.y < 1) {
                    // debugPrintfEXT("\nForward %d", info.index);
                }

                moveForward(ray, info, intSec, dirMask, posMask, node);

                // Stop -> 0 = Empty , 2 = Full
            } else if (state > 1) {
                intSec.intersect = true;
                if (gl_GlobalInvocationID.xy.x < 1 && gl_GlobalInvocationID.xy.y < 1) {
                    // debugPrintfEXT("\nFin %d", info.index);
                }

                break;
            }
        }
    }

    if (gl_GlobalInvocationID.xy.x < 1 && gl_GlobalInvocationID.xy.y < 1) {
        debugPrintfEXT("\nFin %d %f", curStep, intSec.dist);
    }

    intSec.info = info;
    return intSec;
}

Intersection traversePrimaryRay(vec2 coord, vec2 res, vec2 mouse) {
    vec2 screenPos = (res - coord * 2.0) / res.y;

    vec3 origin = uniformBuffer.pos.xyz;
    vec3 dir = normalize(vec3(screenPos, 1.0));

    float offset = 3.14 * 0.5;
    dir.yz *= rot((res.y - mouse.y) / res.y * 3.14 - offset);
    dir.xz *= rot((res.x - mouse.x) / res.x * 3.14 - offset);

    Ray ray = Ray(origin, dir, 1.0 / max(abs(dir), 0.001));

    vec3 maskInParent[maxDepth];
    vec3 localPos = mod(origin, uniformBuffer.rootSpan);
    vec3 posOnEdge = origin - localPos;
    PosInfo info = PosInfo(maskInParent, localPos, posOnEdge, 0, uniformBuffer.rootSpan, 0, false);

    TraverseProp prop = TraverseProp(maxDepth, maxDistance, maxSearchDepth);

    return traverseRay(ray, info, prop, 0);
}

Intersection genShadowRay(Intersection lastIntSec) {
    Light light = lightData[0];
    vec3 origin = lastIntSec.info.posOnEdge + lastIntSec.info.localPos;
    vec3 dir = normalize(vec3(light.pos) - origin); // Origin - LightOrigin

    Ray ray = Ray(origin, dir, 1.0 / max(abs(dir), 0.001));

    TraverseProp prop = TraverseProp(maxDepth, maxDistance, maxSearchDepth);

    if (gl_GlobalInvocationID.xy.x < 1 && gl_GlobalInvocationID.xy.y < 1) {
        // debugPrintfEXT("\nIn %v3f %v3f", vec3(light.pos), lastIntSec.info.posOnEdge);
    }

    float expectedDist = distance(origin, vec3(light.pos));
    Intersection newIntSec = traverseRay(ray, lastIntSec.info, prop, 1);

    if (newIntSec.dist > expectedDist * 1.1) {
        newIntSec.dist = 450.0;
    }

    if (newIntSec.dist < expectedDist * 0.9) {
        newIntSec.dist = 0.0;
    }

    if (gl_GlobalInvocationID.xy.x < 1 && gl_GlobalInvocationID.xy.y < 1) {
        // debugPrintfEXT("\nOut %d", newIntSec.info.index);
    }

    return newIntSec;
}

void main() {
    imageStore(computeImage, ivec2(gl_GlobalInvocationID.xy), vec4(0));
    vec2 coord = gl_GlobalInvocationID.xy;
    vec2 res = uniformBuffer.res;
    vec2 mouse = uniformBuffer.mouse;

    float time = float(uniformBuffer.time) / 1000.0 * 0.5;

    // if (gl_GlobalInvocationID.xy.x < 1 && gl_GlobalInvocationID.xy.y < 1) {
    // debugPrintfEXT("");
    // }

    // dir(rad(vec2(30, 30)))

    Intersection intSec = traversePrimaryRay(coord, res, mouse);
    TreeNode node = octreeData[intSec.info.index];

    if (intSec.intersect) {
        // Intersection shadowIntSec = genShadowRay(intSec);
        imageStore(computeImage, ivec2(gl_GlobalInvocationID.xy), node.baseColor * 1);
    }
}