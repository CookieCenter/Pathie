#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_scalar_block_layout : enable

#define TEXTURE_ALIGN 16

#define pos_to_px(pos) (vec2(pos.x, pos.y + (pos.z * TEXTURE_ALIGN)))
#define get_neighbor(tex_coord, pos) (tex_coord + pos_to_px(pos))

layout (local_size_x = 16, local_size_y = 16) in;
layout (set = 0, binding = 0) uniform sampler2D brick_texture;
layout (set = 1, binding = 0, rgba8) uniform image2D out_brick_texture;

layout(push_constant) uniform PushConstant {
    uint px_per_group;
} constant;

vec2 min_texel;
vec2 max_texel;

void compare_neighbor(vec3 check_neighbor, vec2 base_texel, inout float cur_dist) {
    vec2 texel = get_neighbor(base_texel, check_neighbor);
    texel = clamp(texel, min_texel, max_texel);
    vec4 val = texelFetch(brick_texture, ivec2(texel), 0);

    // neighbor is full or stored distance
    float dist = val.x > 0.0 ? 1 : val.w + 1;

    // get smallest value
    cur_dist = min(cur_dist, dist);
}

void main() {
    vec2 group_pos = vec2(gl_GlobalInvocationID.xy);
    vec2 base_texel = group_pos * float(constant.px_per_group) + vec2(constant.px_per_group);

    float min_x = floor(base_texel.x / TEXTURE_ALIGN);
    float min_y = floor(base_texel.y / (TEXTURE_ALIGN * TEXTURE_ALIGN));

    min_texel = vec2(min_x, min_y);
    max_texel = vec2(min_x + TEXTURE_ALIGN, min_y + TEXTURE_ALIGN * TEXTURE_ALIGN);

    vec4 val = texelFetch(brick_texture, ivec2(base_texel), 0);

    float cur_dist = val.w;

    // loop gonna be unrolled cuz more fast
    compare_neighbor(vec3(-1, -1, -1), base_texel, cur_dist);
    compare_neighbor(vec3(0, -1, -1), base_texel, cur_dist);
    compare_neighbor(vec3(1, -1, -1), base_texel, cur_dist);

    compare_neighbor(vec3(-1, -1, 0), base_texel, cur_dist);
    compare_neighbor(vec3(0, -1, 0), base_texel, cur_dist);
    compare_neighbor(vec3(1, -1, 0), base_texel, cur_dist);

    compare_neighbor(vec3(-1, -1, 1), base_texel, cur_dist);
    compare_neighbor(vec3(0, -1, 1), base_texel, cur_dist);
    compare_neighbor(vec3(1, -1, 1), base_texel, cur_dist);


    compare_neighbor(vec3(-1, 0, -1), base_texel, cur_dist);
    compare_neighbor(vec3(0, 0, -1), base_texel, cur_dist);
    compare_neighbor(vec3(1, 0, -1), base_texel, cur_dist);

    compare_neighbor(vec3(-1, 0, 0), base_texel, cur_dist);

    compare_neighbor(vec3(1, 0, 0), base_texel, cur_dist);

    compare_neighbor(vec3(-1, 0, 1), base_texel, cur_dist);
    compare_neighbor(vec3(0, 0, 1), base_texel, cur_dist);
    compare_neighbor(vec3(1, 0, 1), base_texel, cur_dist);


    compare_neighbor(vec3(-1, 1, -1), base_texel, cur_dist);
    compare_neighbor(vec3(0, 1, -1), base_texel, cur_dist);
    compare_neighbor(vec3(1, 1, -1), base_texel, cur_dist);

    compare_neighbor(vec3(-1, 1, 0), base_texel, cur_dist);
    compare_neighbor(vec3(0, 1, 0), base_texel, cur_dist);
    compare_neighbor(vec3(1, 1, 0), base_texel, cur_dist);

    compare_neighbor(vec3(-1, 1, 1), base_texel, cur_dist);
    compare_neighbor(vec3(0, 1, 1), base_texel, cur_dist);
    compare_neighbor(vec3(1, 1, 1), base_texel, cur_dist);

    // imageStore(out_brick_texture, ivec2(group_pos), vec4(val.xyz, cur_dist));
}