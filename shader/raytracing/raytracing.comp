# version 450
# extension GL_ARB_separate_shader_objects : enable
# extension GL_ARB_shading_language_420pack : enable
# extension GL_EXT_debug_printf : enable

# define PI 3.141592654
# define ACCURACY 100

layout (local_size_x = 16, local_size_y = 16) in;
layout (set = 0, binding = 0, rgba8) uniform image2D computeImage;

struct VoxelChunk {
	uint[256] voxelData;
};

layout (set = 1, binding = 0) buffer VoxelChunkList {
	VoxelChunk voxelChunkList[];
};

layout (set = 2, binding = 0) uniform UniformBuffer {
	float fieldOfView;
	uint maxRayLen;

	uvec2 headRotation;
	uvec3 PlayerPos;
} uniformBuffer;

float roundFloat(float val) { return round(val * ACCURACY) / ACCURACY; }
float getDistanceNext(float input_float) { return floor(input_float + sign(input_float)) - (input_float * sign(input_float)); }
float divide(float first, float sec) { if (sec != 0.0) { return first / sec; } else { return first; } }
// float posToListIndex(vec3 pos)

int castRay(vec2 dir, vec3 origin, uint maxLen) {
	float alpha = dir.x * float(PI) / float(180);
	float beta = dir.y * float(PI) / float(180);
	
	vec3 unit = vec3(cos(alpha) * cos(beta), sin(beta), sin(alpha) * cos(beta));
	
	float len = 0;
	vec3 curPos = origin;

	for (int iter = 0; iter < maxLen; iter += 1) {
		vec3 distNextVox = vec3(getDistanceNext(curPos.x), getDistanceNext(curPos.y), getDistanceNext(curPos.z));
		vec3 lengthCertainDir = vec3(distNextVox.x / unit.x, distNextVox.y / unit.y, distNextVox.z / unit.z);

		if (lengthCertainDir.x < lengthCertainDir.y) {
			if (lengthCertainDir.x < lengthCertainDir.z) {
				float selectedLen = lengthCertainDir.x;
				curPos += vec3(distNextVox.y, unit.y * selectedLen, unit.z * selectedLen);
				len += selectedLen;
			}	
			else {
				float selectedLen = lengthCertainDir.z;
				curPos += vec3(unit.x * selectedLen, unit.y * selectedLen, distNextVox.z);
				len += selectedLen;
			} 
		}
		else {
			if (lengthCertainDir.y < lengthCertainDir.z) {
				float selectedLen = lengthCertainDir.y;
				curPos += vec3(unit.x * selectedLen, distNextVox.y, unit.z * selectedLen);
				len += selectedLen;
			}
			else {
				float selectedLen = lengthCertainDir.z;
				curPos += vec3(unit.x * selectedLen, unit.y * selectedLen, distNextVox.z);
				len += selectedLen;
			}
		}

		ivec3 posAsInt = ivec3(int(floor(curPos.x)), int(floor(curPos.y)), int(floor(curPos.z)));
		// int voxAtPos = data[posAsInt.x][posAsInt.y][posAsInt.z];
		// if (voxAtPos > 0) { return voxAtPos; }
	}

	return 0;
}

void main () {
	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 imageSize = ivec2(gl_NumWorkGroups.xy);
	
	float horizontalDegree = uniformBuffer.fieldOfView / float(imageSize.x) * float(pixelCoord.x);
	float verticalDegree = uniformBuffer.fieldOfView / float(imageSize.y) * float(pixelCoord.y);
	
	int test = castRay(vec2(horizontalDegree, verticalDegree), vec3(0.1, 0.1, 0.1), uniformBuffer.maxRayLen);
	// debugPrintfEXT("\n%d", test);
	imageStore(computeImage, pixelCoord, vec4(horizontalDegree, 0, 0, 0));
}