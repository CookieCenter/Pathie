# version 450
# extension GL_ARB_separate_shader_objects : enable
# extension GL_ARB_shading_language_420pack : enable
# extension GL_EXT_debug_printf : enable

# define PI 3.141592654
# define LIMIT 1
# define ACCURACY 100
# define FOV 60.0

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout (set = 0, binding = 0, rgba8) uniform image2D computeImage;

struct BasicVoxel {
	bool valid;
	vec4 color;
};

layout (set = 1, binding = 0) buffer BasicVoxelList {
	BasicVoxel basicVoxelList[];
};

layout (set = 2, binding = 0) buffer UniformBuffer {
	vec3 headRotation;
	vec3 PlayerPos;
} uniformBuffer;

BasicVoxel[16][16][16] voxelMatrix;

float roundFloat(float val) { return round(val * ACCURACY) / ACCURACY; }
float getDistanceNext(float input_float) { return floor(input_float + sign(input_float)) - (input_float * sign(input_float)); }
float divide(float first, float sec) { if (sec != 0.0) { return first / sec; } else { return first; } }

BasicVoxel castRay(vec2 dir, vec3 origin) {
	BasicVoxel voxel = BasicVoxel(false, vec4(0.0, 0.0, 0.0, 0.0));

	float alpha = dir.x * float(PI) / float(180);
	float beta = dir.y * float(PI) / float(180);
	
	vec3 unit = vec3(cos(alpha) * cos(beta), sin(beta), sin(alpha) * cos(beta));
	
	float len = 0;
	vec3 curPos = origin;


	for (int iter = 0; iter < 5; iter += 1) {
		vec3 distNextVox = vec3(getDistanceNext(curPos.x), getDistanceNext(curPos.y), getDistanceNext(curPos.z));
		vec3 lengthCertainDir = vec3(distNextVox.x / unit.x, distNextVox.y / unit.y, distNextVox.z / unit.z);

		if (lengthCertainDir.x < lengthCertainDir.y) {
			if (lengthCertainDir.x < lengthCertainDir.z) {
				float selectedLen = lengthCertainDir.x;
				curPos = vec3(curPos.x + distNextVox.y, unit.y * selectedLen + curPos.y, unit.z * selectedLen + curPos.z);
				len += selectedLen;
			}	
			else {
				float selectedLen = lengthCertainDir.z;
				curPos = vec3(unit.x * selectedLen + curPos.x, unit.y * selectedLen + curPos.y, curPos.z + distNextVox.z);
				len += selectedLen;
			} 
		}
		else {
			if (lengthCertainDir.y < lengthCertainDir.z) {
				float selectedLen = lengthCertainDir.y;
				curPos = vec3(unit.x * selectedLen + curPos.x, curPos.y + distNextVox.y, unit.z * selectedLen + curPos.z);
				len += selectedLen;
			}
			else {
				float selectedLen = lengthCertainDir.z;
				curPos = vec3(unit.x * selectedLen + curPos.x, unit.y * selectedLen + curPos.y, curPos.z + distNextVox.z);
				len += selectedLen;
			}
		}

		ivec3 posAsInt = ivec3(int(floor(curPos.x)), int(floor(curPos.y)), int(floor(curPos.z)));

		if (gl_GlobalInvocationID.xy == uvec2(0, 0)) {
			debugPrintfEXT("\n%d %d %d", posAsInt.x, posAsInt.y, posAsInt.z);
		}

		BasicVoxel currentVoxel = voxelMatrix[posAsInt.x][posAsInt.y][posAsInt.z];
		// if (currentVoxel.valid == true) { voxel = currentVoxel; break; }
	}

	return voxel;
}

void main () {
	voxelMatrix[3][3][3] = BasicVoxel(true, vec4(1, 0, 0, 0));
	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 imageSize = ivec2(gl_NumWorkGroups.xy);
	float degree = FOV / float(imageSize.x) * float(pixelCoord.x);
	vec2 direction = vec2(degree, 35.0);

	BasicVoxel test = castRay(direction, vec3(0.1, 0.1, 0.1));
	
	imageStore(computeImage, pixelCoord, vec4(0,1,0,0));
}