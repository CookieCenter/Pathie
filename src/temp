pub fn move_layer_up(&mut self, data: &Vec<TreeNode>, dir_mask: Vector3<f32>, ) {
    // Compute the rest ( because of moving up ) into LocalOrigin
    let new_origin_on_edge = 
        floor_vec_three(self.origin_on_edge / (self.cur_span / 2.0)) * (self.cur_span * 2.0);
    
    self.local_origin += self.origin_on_edge - new_origin_on_edge;
    self.origin_on_edge = new_origin_on_edge;

    self.cur_recursion -= 1;
    self.cur_span *= 2.0;

    // Use earlier saved mask and move in dir
    self.mask_in_parent[self.cur_recursion] = 
        add_dir_to_mask(self.mask_in_parent[self.cur_recursion], dir_mask, );

    // Temp save parent of parent of CurNode
    let parent_of_parent = 
        data[data[self.cur_index].parent as usize];
    
    // Moved mask into SpaceIndex and get global index of Child
    let next_space_index = 
        pos_to_index(self.mask_in_parent[self.cur_recursion], 2, );
    self.cur_index = parent_of_parent
        .children[next_space_index] as usize;
}