pub fn move_layer_up(&mut self, data: &Vec<TreeNode>, dir_mask: Vector3<f32>, ) {
    // Compute the rest ( because of moving up ) into LocalOrigin
    let new_origin_on_edge = 
        floor_vec_three(self.origin_on_edge / (self.cur_span / 2.0)) * (self.cur_span * 2.0);
    
    self.local_origin += self.origin_on_edge - new_origin_on_edge;
    self.origin_on_edge = new_origin_on_edge;

    self.cur_recursion -= 1;
    self.cur_span *= 2.0;

    // Use earlier saved mask and move in dir
    self.mask_in_parent[self.cur_recursion] = 
        add_dir_to_mask(self.mask_in_parent[self.cur_recursion], dir_mask, );

    // Temp save parent of parent of CurNode
    let parent_of_parent = 
        data[data[self.cur_index].parent as usize];
    
    // Moved mask into SpaceIndex and get global index of Child
    let next_space_index = 
        pos_to_index(self.mask_in_parent[self.cur_recursion], 2, );
    self.cur_index = parent_of_parent
        .children[next_space_index] as usize;
}

// Ground
for x in 0..100 {
    for z in 0..100 {
        let base_color = Vector4::new(1.0, 1.0, 1.0, 0.0);
        self.insert_node(
            Vector3::new(100.0 + x as f32, 100.0, 100.0 + z as f32),
            base_color,
            2,
        );
    }
}

// GreenWall
for z in 0..100 {
    for y in 0..100 {
        let base_color = Vector4::new(0.0, 1.0, 0.0, 0.0);
        self.insert_node(
            Vector3::new(100.0, 100.0 + y as f32, 100.0 + z as f32),
            base_color,
            2,
        );
    }
}

// RedWall
for z in 0..100 {
    for y in 0..100 {
        let base_color = Vector4::new(1.0, 0.0, 0.0, 0.0);
        self.insert_node(
            Vector3::new(200.0, 100.0 + y as f32, 100.0 + z as f32),
            base_color,
            2,
        );
    }
}

// BackWall
for x in 0..100 {
    for y in 0..100 {
        let base_color = Vector4::new(1.0, 1.0, 1.0, 0.0);
        self.insert_node(
            Vector3::new(100.0 + x as f32, 100.0 + y as f32, 200.0),
            base_color,
            2,
        );
    }
}

// Ceilling
for x in 0..100 {
    for z in 0..100 {
        let base_color = Vector4::new(1.0, 1.0, 1.0, 0.0);
        self.insert_node(
            Vector3::new(100.0 + x as f32, 200.0, 100.0 + z as f32),
            base_color,
            2,
        );
    }
}

// Box
for x in 0..20 {
    for z in 0..20 {
        for y in 0..20 {
            let base_color = Vector4::new(0.0, 0.0, 1.0, 0.0);
            self.insert_node(
                Vector3::new(140.0 + x as f32, 100.0 + y as f32, 140.0 + z as f32),
                base_color,
                2,
            );
        }
    }
}

/// Recurse octree from depth to MAX_DEPTH. Will collect
/// leaf node_list in spactially correct order.

pub fn branch_to_array(
    &self,
    pos_info: &PosInfo,
    branch_root_span: f32,
    branch_data: &Vec<Subdivide>,
) -> Vec<Leaf> {
    // Get current node
    let cur_node = self.tree_data[pos_info.index()];
    let mut branch_data = branch_data.clone();

    cur_node.children.iter().for_each(|&child_idx| {
        let child = self.[child_idx as usize];
        
        // New position information
        let new_pos_info = PosInfo {
            index: child_idx,
            depth: pos_info.depth + 1,3,
            span: pos_info.span / 2.0,
            // Ignore 4. comp.
            local_pos: pos_info.local_pos + Vector4::from([pos_info.span / 2.0; 4]),
            ..Default::default()
        };

        // Nodetype leaf -> save and return
        if child.node_type == 2 {
            leaf_children[new_pos_info.local_pos.truncate().to_index(branch_root_span)] = child;

        // Nodetype subdivide and not MAX_DEPTH -> further recurse
        } else if child.node_type == 1 && (pos_info.depth as usize) < MAX_DEPTH {
            leaf_children = self.recurse_tree_and_collect_leaf(
                &new_pos_info,
                branch_root_span,
                &leaf_children,
            );
        }
    });

    leaf_children
}

for x in 0..1024 {
    for z in 0..1024 {
        let y = (fbm.get([x as f64, z as f64]) + 1.0) * 1024.0;
        self.insert_node(
            Vector3::new(x as f32, y as f32, z as f32) * 2.0,
            &Material {
                base_color: Vector4::new(
                    rng.gen_range(0.0..1.0),
                    rng.gen_range(0.0..1.0),
                    rng.gen_range(0.0..1.0),
                    1.0,
                ),
            },
        );
    }
}